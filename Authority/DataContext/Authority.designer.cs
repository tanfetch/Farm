#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.17929
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace Farm.Authority.DataContext
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="TanDB")]
	public partial class AuthorityDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region 可扩展性方法定义
    partial void OnCreated();
    partial void InserttbRole(tbRole instance);
    partial void UpdatetbRole(tbRole instance);
    partial void DeletetbRole(tbRole instance);
    partial void InserttbUser(tbUser instance);
    partial void UpdatetbUser(tbUser instance);
    partial void DeletetbUser(tbUser instance);
    partial void InserttbPermission(tbPermission instance);
    partial void UpdatetbPermission(tbPermission instance);
    partial void DeletetbPermission(tbPermission instance);
    partial void InsertPurview(Purview instance);
    partial void UpdatePurview(Purview instance);
    partial void DeletePurview(Purview instance);
    #endregion
		
		public AuthorityDataContext() : 
				base(global::Farm.Authority.Properties.Settings.Default.TanDBConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public AuthorityDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public AuthorityDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public AuthorityDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public AuthorityDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<tbRole> tbRole
		{
			get
			{
				return this.GetTable<tbRole>();
			}
		}
		
		public System.Data.Linq.Table<tbUser> tbUser
		{
			get
			{
				return this.GetTable<tbUser>();
			}
		}
		
		public System.Data.Linq.Table<tbPermission> tbPermission
		{
			get
			{
				return this.GetTable<tbPermission>();
			}
		}
		
		public System.Data.Linq.Table<Purview> Purview
		{
			get
			{
				return this.GetTable<Purview>();
			}
		}
		
		public System.Data.Linq.Table<Users> Users
		{
			get
			{
				return this.GetTable<Users>();
			}
		}
		
		public System.Data.Linq.Table<Role> Role
		{
			get
			{
				return this.GetTable<Role>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tbRole")]
	public partial class tbRole : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _name;
		
		private string _description;
		
		private bool _disabled;
		
		private EntitySet<tbUser> _tbUser;
		
		private EntitySet<tbPermission> _tbPermission;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OndescriptionChanging(string value);
    partial void OndescriptionChanged();
    partial void OndisabledChanging(bool value);
    partial void OndisabledChanged();
    #endregion
		
		public tbRole()
		{
			this._tbUser = new EntitySet<tbUser>(new Action<tbUser>(this.attach_tbUser), new Action<tbUser>(this.detach_tbUser));
			this._tbPermission = new EntitySet<tbPermission>(new Action<tbPermission>(this.attach_tbPermission), new Action<tbPermission>(this.detach_tbPermission));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_description", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string description
		{
			get
			{
				return this._description;
			}
			set
			{
				if ((this._description != value))
				{
					this.OndescriptionChanging(value);
					this.SendPropertyChanging();
					this._description = value;
					this.SendPropertyChanged("description");
					this.OndescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_disabled", DbType="Bit NOT NULL")]
		public bool disabled
		{
			get
			{
				return this._disabled;
			}
			set
			{
				if ((this._disabled != value))
				{
					this.OndisabledChanging(value);
					this.SendPropertyChanging();
					this._disabled = value;
					this.SendPropertyChanged("disabled");
					this.OndisabledChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tbRole_tbUser", Storage="_tbUser", ThisKey="ID", OtherKey="roleID")]
		public EntitySet<tbUser> tbUser
		{
			get
			{
				return this._tbUser;
			}
			set
			{
				this._tbUser.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tbRole_tbPermission", Storage="_tbPermission", ThisKey="ID", OtherKey="roleID")]
		public EntitySet<tbPermission> tbPermission
		{
			get
			{
				return this._tbPermission;
			}
			set
			{
				this._tbPermission.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tbUser(tbUser entity)
		{
			this.SendPropertyChanging();
			entity.tbRole = this;
		}
		
		private void detach_tbUser(tbUser entity)
		{
			this.SendPropertyChanging();
			entity.tbRole = null;
		}
		
		private void attach_tbPermission(tbPermission entity)
		{
			this.SendPropertyChanging();
			entity.tbRole = this;
		}
		
		private void detach_tbPermission(tbPermission entity)
		{
			this.SendPropertyChanging();
			entity.tbRole = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tbUser")]
	public partial class tbUser : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _userID;
		
		private string _userName;
		
		private string _userPassword;
		
		private int _roleID;
		
		private int _logTimes;
		
		private System.DateTime _lastLogTime;
		
		private string _lastLogIP;
		
		private EntitySet<Purview> _Purview;
		
		private EntityRef<tbRole> _tbRole;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnuserIDChanging(string value);
    partial void OnuserIDChanged();
    partial void OnuserNameChanging(string value);
    partial void OnuserNameChanged();
    partial void OnuserPasswordChanging(string value);
    partial void OnuserPasswordChanged();
    partial void OnroleIDChanging(int value);
    partial void OnroleIDChanged();
    partial void OnlogTimesChanging(int value);
    partial void OnlogTimesChanged();
    partial void OnlastLogTimeChanging(System.DateTime value);
    partial void OnlastLogTimeChanged();
    partial void OnlastLogIPChanging(string value);
    partial void OnlastLogIPChanged();
    #endregion
		
		public tbUser()
		{
			this._Purview = new EntitySet<Purview>(new Action<Purview>(this.attach_Purview), new Action<Purview>(this.detach_Purview));
			this._tbRole = default(EntityRef<tbRole>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userID", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string userID
		{
			get
			{
				return this._userID;
			}
			set
			{
				if ((this._userID != value))
				{
					this.OnuserIDChanging(value);
					this.SendPropertyChanging();
					this._userID = value;
					this.SendPropertyChanged("userID");
					this.OnuserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string userName
		{
			get
			{
				return this._userName;
			}
			set
			{
				if ((this._userName != value))
				{
					this.OnuserNameChanging(value);
					this.SendPropertyChanging();
					this._userName = value;
					this.SendPropertyChanged("userName");
					this.OnuserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userPassword", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string userPassword
		{
			get
			{
				return this._userPassword;
			}
			set
			{
				if ((this._userPassword != value))
				{
					this.OnuserPasswordChanging(value);
					this.SendPropertyChanging();
					this._userPassword = value;
					this.SendPropertyChanged("userPassword");
					this.OnuserPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_roleID", DbType="Int NOT NULL")]
		public int roleID
		{
			get
			{
				return this._roleID;
			}
			set
			{
				if ((this._roleID != value))
				{
					if (this._tbRole.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnroleIDChanging(value);
					this.SendPropertyChanging();
					this._roleID = value;
					this.SendPropertyChanged("roleID");
					this.OnroleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_logTimes", DbType="Int NOT NULL")]
		public int logTimes
		{
			get
			{
				return this._logTimes;
			}
			set
			{
				if ((this._logTimes != value))
				{
					this.OnlogTimesChanging(value);
					this.SendPropertyChanging();
					this._logTimes = value;
					this.SendPropertyChanged("logTimes");
					this.OnlogTimesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_lastLogTime", DbType="DateTime NOT NULL")]
		public System.DateTime lastLogTime
		{
			get
			{
				return this._lastLogTime;
			}
			set
			{
				if ((this._lastLogTime != value))
				{
					this.OnlastLogTimeChanging(value);
					this.SendPropertyChanging();
					this._lastLogTime = value;
					this.SendPropertyChanged("lastLogTime");
					this.OnlastLogTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_lastLogIP", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string lastLogIP
		{
			get
			{
				return this._lastLogIP;
			}
			set
			{
				if ((this._lastLogIP != value))
				{
					this.OnlastLogIPChanging(value);
					this.SendPropertyChanging();
					this._lastLogIP = value;
					this.SendPropertyChanged("lastLogIP");
					this.OnlastLogIPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tbUser_Purview", Storage="_Purview", ThisKey="ID", OtherKey="userID")]
		public EntitySet<Purview> Purview
		{
			get
			{
				return this._Purview;
			}
			set
			{
				this._Purview.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tbRole_tbUser", Storage="_tbRole", ThisKey="roleID", OtherKey="ID", IsForeignKey=true)]
		public tbRole tbRole
		{
			get
			{
				return this._tbRole.Entity;
			}
			set
			{
				tbRole previousValue = this._tbRole.Entity;
				if (((previousValue != value) 
							|| (this._tbRole.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tbRole.Entity = null;
						previousValue.tbUser.Remove(this);
					}
					this._tbRole.Entity = value;
					if ((value != null))
					{
						value.tbUser.Add(this);
						this._roleID = value.ID;
					}
					else
					{
						this._roleID = default(int);
					}
					this.SendPropertyChanged("tbRole");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Purview(Purview entity)
		{
			this.SendPropertyChanging();
			entity.tbUser = this;
		}
		
		private void detach_Purview(Purview entity)
		{
			this.SendPropertyChanging();
			entity.tbUser = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tbPermission")]
	public partial class tbPermission : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _roleID;
		
		private string _controllerName;
		
		private string _actionName;
		
		private EntityRef<tbRole> _tbRole;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnroleIDChanging(int value);
    partial void OnroleIDChanged();
    partial void OncontrollerNameChanging(string value);
    partial void OncontrollerNameChanged();
    partial void OnactionNameChanging(string value);
    partial void OnactionNameChanged();
    #endregion
		
		public tbPermission()
		{
			this._tbRole = default(EntityRef<tbRole>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_roleID", DbType="Int NOT NULL")]
		public int roleID
		{
			get
			{
				return this._roleID;
			}
			set
			{
				if ((this._roleID != value))
				{
					if (this._tbRole.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnroleIDChanging(value);
					this.SendPropertyChanging();
					this._roleID = value;
					this.SendPropertyChanged("roleID");
					this.OnroleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_controllerName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string controllerName
		{
			get
			{
				return this._controllerName;
			}
			set
			{
				if ((this._controllerName != value))
				{
					this.OncontrollerNameChanging(value);
					this.SendPropertyChanging();
					this._controllerName = value;
					this.SendPropertyChanged("controllerName");
					this.OncontrollerNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_actionName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string actionName
		{
			get
			{
				return this._actionName;
			}
			set
			{
				if ((this._actionName != value))
				{
					this.OnactionNameChanging(value);
					this.SendPropertyChanging();
					this._actionName = value;
					this.SendPropertyChanged("actionName");
					this.OnactionNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tbRole_tbPermission", Storage="_tbRole", ThisKey="roleID", OtherKey="ID", IsForeignKey=true)]
		public tbRole tbRole
		{
			get
			{
				return this._tbRole.Entity;
			}
			set
			{
				tbRole previousValue = this._tbRole.Entity;
				if (((previousValue != value) 
							|| (this._tbRole.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tbRole.Entity = null;
						previousValue.tbPermission.Remove(this);
					}
					this._tbRole.Entity = value;
					if ((value != null))
					{
						value.tbPermission.Add(this);
						this._roleID = value.ID;
					}
					else
					{
						this._roleID = default(int);
					}
					this.SendPropertyChanged("tbRole");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Purview")]
	public partial class Purview : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _userID;
		
		private int _areaID;
		
		private EntityRef<tbUser> _tbUser;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnuserIDChanging(int value);
    partial void OnuserIDChanged();
    partial void OnareaIDChanging(int value);
    partial void OnareaIDChanged();
    #endregion
		
		public Purview()
		{
			this._tbUser = default(EntityRef<tbUser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userID", DbType="Int NOT NULL")]
		public int userID
		{
			get
			{
				return this._userID;
			}
			set
			{
				if ((this._userID != value))
				{
					if (this._tbUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnuserIDChanging(value);
					this.SendPropertyChanging();
					this._userID = value;
					this.SendPropertyChanged("userID");
					this.OnuserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_areaID", DbType="Int NOT NULL")]
		public int areaID
		{
			get
			{
				return this._areaID;
			}
			set
			{
				if ((this._areaID != value))
				{
					this.OnareaIDChanging(value);
					this.SendPropertyChanging();
					this._areaID = value;
					this.SendPropertyChanged("areaID");
					this.OnareaIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tbUser_Purview", Storage="_tbUser", ThisKey="userID", OtherKey="ID", IsForeignKey=true)]
		public tbUser tbUser
		{
			get
			{
				return this._tbUser.Entity;
			}
			set
			{
				tbUser previousValue = this._tbUser.Entity;
				if (((previousValue != value) 
							|| (this._tbUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tbUser.Entity = null;
						previousValue.Purview.Remove(this);
					}
					this._tbUser.Entity = value;
					if ((value != null))
					{
						value.Purview.Add(this);
						this._userID = value.ID;
					}
					else
					{
						this._userID = default(int);
					}
					this.SendPropertyChanged("tbUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Users")]
	public partial class Users
	{
		
		private int _ID;
		
		private string _userID;
		
		private string _userName;
		
		private string _userPassword;
		
		private int _roleID;
		
		private int _logTimes;
		
		private System.DateTime _lastLogTime;
		
		private string _lastLogIP;
		
		private string _roleName;
		
		public Users()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL")]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this._ID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userID", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string userID
		{
			get
			{
				return this._userID;
			}
			set
			{
				if ((this._userID != value))
				{
					this._userID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userName", DbType="NVarChar(50)")]
		public string userName
		{
			get
			{
				return this._userName;
			}
			set
			{
				if ((this._userName != value))
				{
					this._userName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userPassword", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string userPassword
		{
			get
			{
				return this._userPassword;
			}
			set
			{
				if ((this._userPassword != value))
				{
					this._userPassword = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_roleID", DbType="Int NOT NULL")]
		public int roleID
		{
			get
			{
				return this._roleID;
			}
			set
			{
				if ((this._roleID != value))
				{
					this._roleID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_logTimes", DbType="Int NOT NULL")]
		public int logTimes
		{
			get
			{
				return this._logTimes;
			}
			set
			{
				if ((this._logTimes != value))
				{
					this._logTimes = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_lastLogTime", DbType="DateTime NOT NULL")]
		public System.DateTime lastLogTime
		{
			get
			{
				return this._lastLogTime;
			}
			set
			{
				if ((this._lastLogTime != value))
				{
					this._lastLogTime = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_lastLogIP", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string lastLogIP
		{
			get
			{
				return this._lastLogIP;
			}
			set
			{
				if ((this._lastLogIP != value))
				{
					this._lastLogIP = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_roleName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string roleName
		{
			get
			{
				return this._roleName;
			}
			set
			{
				if ((this._roleName != value))
				{
					this._roleName = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Role")]
	public partial class Role
	{
		
		private int _ID;
		
		private string _name;
		
		private string _description;
		
		private bool _disabled;
		
		private System.Data.Linq.Binary _role1;
		
		public Role()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.Always, DbType="Int NOT NULL IDENTITY", IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this._ID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this._name = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_description", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string description
		{
			get
			{
				return this._description;
			}
			set
			{
				if ((this._description != value))
				{
					this._description = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_disabled", DbType="Bit NOT NULL")]
		public bool disabled
		{
			get
			{
				return this._disabled;
			}
			set
			{
				if ((this._disabled != value))
				{
					this._disabled = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="role", Storage="_role1", DbType="VarBinary(50) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary role1
		{
			get
			{
				return this._role1;
			}
			set
			{
				if ((this._role1 != value))
				{
					this._role1 = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
